<!-- livebook:{"persist_outputs":true} -->

# Getting Deep with Axon

```elixir
Mix.install([
  {:axon, "~> 0.5"},
  {:nx, "~> 0.5"},
  {:exla, "~> 0.5"},
  {:scidata, "~> 0.1"},
  {:kino, "~> 0.8"},
  {:table_rex, "~> 3.1.1"}
])

Nx.default_backend(EXLA.Backend)
```

## Using Nx to Create a Simple Neural Network

```elixir
defmodule NeuralNetwork do
  import Nx.Defn

  defn dense(input, weight, bias) do
    input
    |> Nx.dot(weight)
    |> Nx.add(bias)
  end

  defn activation(input) do
    Nx.sigmoid(input)
  end

  defn hidden(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn output(input, weight, bias) do
    input
    |> dense(weight, bias)
    |> activation()
  end

  defn predict(input, w1, b1, w2, b2) do
    input
    |> hidden(w1, b1)
    |> output(w2, b2)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, NeuralNetwork, <<70, 79, 82, 49, 0, 0, 18, ...>>, true}
```

```elixir
key = Nx.Random.key(42)
{w1, new_key} = Nx.Random.uniform(key)
{b1, new_key} = Nx.Random.uniform(new_key)
{w2, new_key} = Nx.Random.uniform(new_key)
{b2, new_key} = Nx.Random.uniform(new_key)
```

<!-- livebook:{"output":true} -->

```
{#Nx.Tensor<
   f32
   EXLA.Backend<host:0, 0.1724559314.4139122705.145180>
   0.6716941595077515
 >,
 #Nx.Tensor<
   u32[2]
   EXLA.Backend<host:0, 0.1724559314.4139122705.145182>
   [4249898905, 2425127087]
 >}
```

```elixir
{input, _new_key} = Nx.Random.uniform(new_key)

input
|> NeuralNetwork.predict(w1, b1, w2, b2)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  EXLA.Backend<host:0, 0.1724559314.4139122705.145693>
  0.6635995507240295
>
```

## Working with the Data

```elixir
{images, labels} = Scidata.MNIST.download()
```

<!-- livebook:{"output":true} -->

```
{{<<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...>>, {:u, 8}, {60000, 1, 28, 28}},
 {<<5, 0, 4, 1, 9, 2, 1, 3, 1, 4, 3, 5, 3, 6, 1, 7, 2, 8, 6, 9, 4, 0, 9, 1, 1, 2, 4, 3, 2, 7, 3, 8,
    6, 9, 0, 5, 6, 0, 7, 6, 1, 8, 7, 9, 3, 9, 8, ...>>, {:u, 8}, {60000}}}
```

```elixir
{image_data, image_type, image_shape} = images
{label_data, label_type, label_shape} = labels

images =
  image_data
  |> Nx.from_binary(image_type)
  |> Nx.divide(255)
  |> Nx.reshape({60000, :auto})

labels =
  label_data
  |> Nx.from_binary(label_type)
  |> Nx.reshape(label_shape)
  |> Nx.new_axis(-1)
  |> Nx.equal(Nx.iota({1, 10}))
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[60000][10]
  EXLA.Backend<host:0, 0.1724559314.4139122705.145703>
  [
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    ...
  ]
>
```

```elixir
train_range = 0..49_999//1
test_range = 50_000..-1//1

train_images = images[train_range]
train_labels = labels[train_range]

test_images = images[test_range]
test_labels = labels[test_range]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u8[10000][10]
  EXLA.Backend<host:0, 0.1724559314.4139122705.145711>
  [
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    ...
  ]
>
```

```elixir
batch_size = 64

train_data =
  train_images
  |> Nx.to_batched(batch_size)
  |> Stream.zip(Nx.to_batched(train_labels, batch_size))

test_data =
  test_images
  |> Nx.to_batched(batch_size)
  |> Stream.zip(Nx.to_batched(test_labels, batch_size))
```

<!-- livebook:{"output":true} -->

```
#Function<76.38948127/2 in Stream.zip_with/2>
```

## Building the Model

```elixir
model =
  Axon.input("images", shape: {nil, 784})
  |> Axon.dense(128, activation: :relu)
  |> Axon.dense(10, activation: :softmax)
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"images" => {nil, 784}}
  outputs: "softmax_0"
  nodes: 5
>
```

```elixir
Axon.Display.as_graph(model, Nx.template({1, 784}, :f32))
```

<!-- livebook:{"output":true} -->

```mermaid
graph TD;
7[/"images (:input) {1, 784}"/];
8["dense_0 (:dense) {1, 128}"];
9["relu_0 (:relu) {1, 128}"];
10["dense_1 (:dense) {1, 10}"];
11["softmax_0 (:softmax) {1, 10}"];
10 --> 11;
9 --> 10;
8 --> 9;
7 --> 8;
```

```elixir
template = Nx.template({1, 784}, :f32)

Axon.Display.as_table(model, template)
|> IO.puts()
```

<!-- livebook:{"output":true} -->

```
warning: using map.field notation (without parentheses) to invoke function TableRex.Renderer.Text.default_options() is deprecated, you must add parentheses instead: remote.function()
  (table_rex 3.1.1) lib/table_rex/table.ex:274: TableRex.Table.render/2
  (table_rex 3.1.1) lib/table_rex/table.ex:292: TableRex.Table.render!/2
  (axon 0.6.1) lib/axon/display.ex:51: Axon.Display.as_table/2
  (elixir 1.17.2) src/elixir.erl:386: :elixir.eval_external_handler/3
  (stdlib 6.0) erl_eval.erl:904: :erl_eval.do_apply/7

+-----------------------------------------------------------------------------------------------------------+
|                                                   Model                                                   |
+==================================+=============+==============+===================+=======================+
| Layer                            | Input Shape | Output Shape | Options           | Parameters            |
+==================================+=============+==============+===================+=======================+
| images ( input )                 | []          | {1, 784}     | shape: {nil, 784} |                       |
|                                  |             |              | optional: false   |                       |
+----------------------------------+-------------+--------------+-------------------+-----------------------+
| dense_0 ( dense["images"] )      | [{1, 784}]  | {1, 128}     |                   | kernel: f32[784][128] |
|                                  |             |              |                   | bias: f32[128]        |
+----------------------------------+-------------+--------------+-------------------+-----------------------+
| relu_0 ( relu["dense_0"] )       | [{1, 128}]  | {1, 128}     |                   |                       |
+----------------------------------+-------------+--------------+-------------------+-----------------------+
| dense_1 ( dense["relu_0"] )      | [{1, 128}]  | {1, 10}      |                   | kernel: f32[128][10]  |
|                                  |             |              |                   | bias: f32[10]         |
+----------------------------------+-------------+--------------+-------------------+-----------------------+
| softmax_0 ( softmax["dense_1"] ) | [{1, 10}]   | {1, 10}      |                   |                       |
+----------------------------------+-------------+--------------+-------------------+-----------------------+
Total Parameters: 101770
Total Parameters Memory: 407080 bytes

```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
IO.inspect(model, structs: false)
```

<!-- livebook:{"output":true} -->

```
%{
  output: 11,
  nodes: %{
    7 => %{
      args: [],
      id: 7,
      name: #Function<69.29713129/2 in Axon.name/2>,
      parent: [],
      mode: :both,
      opts: [shape: {nil, 784}, optional: false],
      op: :input,
      stacktrace: [
        {Axon, :layer, 3, [file: ~c"lib/axon.ex", line: 338]},
        {:elixir, :eval_external_handler, 3,
         [file: ~c"src/elixir.erl", line: 386]},
        {:erl_eval, :do_apply, 7, [file: ~c"erl_eval.erl", line: 904]},
        {:erl_eval, :expr_list, 7, [file: ~c"erl_eval.erl", line: 1192]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 610]},
        {:erl_eval, :expr_list, 7, [file: ~c"erl_eval.erl", line: 1192]}
      ],
      __struct__: Axon.Node,
      parameters: [],
      hooks: [],
      op_name: :input,
      policy: %{
        output: {:f, 32},
        params: {:f, 32},
        __struct__: Axon.MixedPrecision.Policy,
        compute: {:f, 32}
      }
    },
    8 => %{
      args: [:layer, :parameter, :parameter],
      id: 8,
      name: #Function<68.29713129/2 in Axon.name/2>,
      parent: ~c"\a",
      mode: :both,
      opts: [],
      op: :dense,
      stacktrace: [
        {Axon, :layer, 3, [file: ~c"lib/axon.ex", line: 338]},
        {Axon, :dense, 3, [file: ~c"lib/axon.ex", line: 816]},
        {:elixir, :eval_external_handler, 3,
         [file: ~c"src/elixir.erl", line: 386]},
        {:erl_eval, :do_apply, 7, [file: ~c"erl_eval.erl", line: 904]},
        {:erl_eval, :expr_list, 7, [file: ~c"erl_eval.erl", line: 1192]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 610]}
      ],
      __struct__: Axon.Node,
      parameters: [
        %{
          name: "kernel",
          type: {:f, 32},
          __struct__: Axon.Parameter,
          children: nil,
          shape: #Function<28.29713129/1 in Axon.dense/3>,
          initializer: #Function<3.47872556/3 in Axon.Initializers.glorot_uniform/1>,
          frozen: false
        },
        %{
          name: "bias",
          type: {:f, 32},
          __struct__: Axon.Parameter,
          children: nil,
          shape: #Function<29.29713129/1 in Axon.dense/3>,
          initializer: #Function<23.47872556/2 in Axon.Initializers.zeros/0>,
          frozen: false
        }
      ],
      hooks: [],
      op_name: :dense,
      policy: %{
        output: {:f, 32},
        params: {:f, 32},
        __struct__: Axon.MixedPrecision.Policy,
        compute: {:f, 32}
      }
    },
    9 => %{
      args: [:layer],
      id: 9,
      name: #Function<68.29713129/2 in Axon.name/2>,
      parent: ~c"\b",
      mode: :both,
      opts: [],
      op: :relu,
      stacktrace: [
        {Axon, :layer, 3, [file: ~c"lib/axon.ex", line: 338]},
        {:elixir, :eval_external_handler, 3,
         [file: ~c"src/elixir.erl", line: 386]},
        {:erl_eval, :do_apply, 7, [file: ~c"erl_eval.erl", line: 904]},
        {:erl_eval, :expr_list, 7, [file: ~c"erl_eval.erl", line: 1192]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 610]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 648]}
      ],
      __struct__: Axon.Node,
      parameters: [],
      hooks: [],
      op_name: :relu,
      policy: %{
        output: {:f, 32},
        params: {:f, 32},
        __struct__: Axon.MixedPrecision.Policy,
        compute: {:f, 32}
      }
    },
    10 => %{
      args: [:layer, :parameter, :parameter],
      id: 10,
      name: #Function<68.29713129/2 in Axon.name/2>,
      parent: ~c"\t",
      mode: :both,
      opts: [],
      op: :dense,
      stacktrace: [
        {Axon, :layer, 3, [file: ~c"lib/axon.ex", line: 338]},
        {Axon, :dense, 3, [file: ~c"lib/axon.ex", line: 816]},
        {:elixir, :eval_external_handler, 3,
         [file: ~c"src/elixir.erl", line: 386]},
        {:erl_eval, :do_apply, 7, [file: ~c"erl_eval.erl", line: 904]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 648]},
        {:elixir, :eval_forms, 4, [file: ~c"src/elixir.erl", line: 364]}
      ],
      __struct__: Axon.Node,
      parameters: [
        %{
          name: "kernel",
          type: {:f, 32},
          __struct__: Axon.Parameter,
          children: nil,
          shape: #Function<28.29713129/1 in Axon.dense/3>,
          initializer: #Function<3.47872556/3 in Axon.Initializers.glorot_uniform/1>,
          frozen: false
        },
        %{
          name: "bias",
          type: {:f, 32},
          __struct__: Axon.Parameter,
          children: nil,
          shape: #Function<29.29713129/1 in Axon.dense/3>,
          initializer: #Function<23.47872556/2 in Axon.Initializers.zeros/0>,
          frozen: false
        }
      ],
      hooks: [],
      op_name: :dense,
      policy: %{
        output: {:f, 32},
        params: {:f, 32},
        __struct__: Axon.MixedPrecision.Policy,
        compute: {:f, 32}
      }
    },
    11 => %{
      args: [:layer],
      id: 11,
      name: #Function<68.29713129/2 in Axon.name/2>,
      parent: ~c"\n",
      mode: :both,
      opts: [],
      op: :softmax,
      stacktrace: [
        {Axon, :layer, 3, [file: ~c"lib/axon.ex", line: 338]},
        {:elixir, :eval_external_handler, 3,
         [file: ~c"src/elixir.erl", line: 386]},
        {:erl_eval, :do_apply, 7, [file: ~c"erl_eval.erl", line: 904]},
        {:erl_eval, :expr, 6, [file: ~c"erl_eval.erl", line: 648]},
        {:elixir, :eval_forms, 4, [file: ~c"src/elixir.erl", line: 364]},
        {Module.ParallelChecker, :verify, 1,
         [file: ~c"lib/module/parallel_checker.ex", line: 112]}
      ],
      __struct__: Axon.Node,
      parameters: [],
      hooks: [],
      op_name: :softmax,
      policy: %{
        output: {:f, 32},
        params: {:f, 32},
        __struct__: Axon.MixedPrecision.Policy,
        compute: {:f, 32}
      }
    }
  },
  __struct__: Axon
}
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"images" => {nil, 784}}
  outputs: "softmax_0"
  nodes: 5
>
```

## Training the Model

```elixir
trained_model_state =
  model
  |> Axon.Loop.trainer(:categorical_cross_entropy, :sgd)
  |> Axon.Loop.metric(:accuracy)
  |> Axon.Loop.run(train_data, %{}, epochs: 10, compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```

15:32:19.440 [debug] Forwarding options: [compiler: EXLA] to JIT compiler
Epoch: 0, Batch: 750, accuracy: 0.7635443 loss: 0.9743937
Epoch: 1, Batch: 768, accuracy: 0.8821928 loss: 0.7049798
Epoch: 2, Batch: 736, accuracy: 0.8966249 loss: 0.5979463
Epoch: 3, Batch: 754, accuracy: 0.9049256 loss: 0.5312265
Epoch: 4, Batch: 772, accuracy: 0.9117885 loss: 0.4868605
Epoch: 5, Batch: 740, accuracy: 0.9172359 loss: 0.4563811
Epoch: 6, Batch: 758, accuracy: 0.9212780 loss: 0.4307739
Epoch: 7, Batch: 776, accuracy: 0.9244087 loss: 0.4102954
Epoch: 8, Batch: 744, accuracy: 0.9274328 loss: 0.3940055
Epoch: 9, Batch: 762, accuracy: 0.9307626 loss: 0.3789910
```

<!-- livebook:{"output":true} -->

```
%{
  "dense_0" => %{
    "bias" => #Nx.Tensor<
      f32[128]
      EXLA.Backend<host:0, 0.1724559314.4139384849.24341>
      [-0.04299028590321541, -0.00813752505928278, 0.006743307691067457, -0.0184532031416893, -0.03250376135110855, 0.08035925775766373, 0.0484258197247982, -0.007157719228416681, 3.878758434439078e-5, 0.08680692315101624, -0.05663647875189781, -0.01604347676038742, 0.039339758455753326, 0.005597877316176891, 0.025172589346766472, -0.040269434452056885, 0.00562853179872036, -0.0013647805899381638, 0.02014189213514328, 0.024227742105722427, 0.08858231455087662, 0.02617560513317585, 0.08268802613019943, 0.046605490148067474, 0.09096963703632355, 0.09885413944721222, -0.011350059881806374, -0.055556610226631165, 0.03784015402197838, 0.02125282771885395, 0.04371371120214462, 0.020534129813313484, -0.0035465529654175043, -0.01119325403124094, -0.025059552863240242, -0.015602444298565388, 0.06675969064235687, 0.10324396193027496, -0.0224545169621706, -0.005611761473119259, -0.03327278420329094, -0.04750055447220802, 0.0027535455301404, -0.007619854994118214, -0.00423169881105423, 0.0655570700764656, 0.05514245852828026, -0.0191146619617939, ...]
    >,
    "kernel" => #Nx.Tensor<
      f32[784][128]
      EXLA.Backend<host:0, 0.1724559314.4139384849.24342>
      [
        [0.07325421273708344, -0.05331948399543762, 0.017646469175815582, 0.017868125811219215, 0.04146752133965492, -0.01339159905910492, 0.05732390284538269, -0.008138581179082394, 0.039684977382421494, 0.02803589403629303, -0.059070635586977005, 0.062420010566711426, -0.06257380545139313, -0.028996387496590614, 0.011068624444305897, -0.06771023571491241, 0.004365389235317707, -0.061359941959381104, -0.006684380117803812, -0.05153840780258179, -0.03481338918209076, 0.027484888210892677, 0.010547998361289501, -0.030307486653327942, 0.003939114976674318, -0.052392326295375824, 0.07451590150594711, 0.0343543142080307, -0.04214231297373772, -0.03991897031664848, 0.05625149980187416, -0.038288481533527374, 0.034225523471832275, -0.038609977811574936, -0.03420516103506088, -0.012215114198625088, -0.04691438749432564, -0.012327044270932674, 0.008683515712618828, 0.06330268830060959, 0.026055265218019485, 0.014454509131610394, 0.06405405700206757, 0.012189626693725586, -0.04239169880747795, 0.021748393774032593, 0.06160489842295647, ...],
        ...
      ]
    >
  },
  "dense_1" => %{
    "bias" => #Nx.Tensor<
      f32[10]
      EXLA.Backend<host:0, 0.1724559314.4139384849.24343>
      [-0.06366901844739914, 0.13591574132442474, -0.018278788775205612, -0.02652377262711525, 0.027617286890745163, 0.18885786831378937, -0.05682734027504921, 0.1693778783082962, -0.279554158449173, -0.07691573351621628]
    >,
    "kernel" => #Nx.Tensor<
      f32[128][10]
      EXLA.Backend<host:0, 0.1724559314.4139384849.24344>
      [
        [-0.24567916989326477, 0.19455324113368988, 0.0638708621263504, -0.17135484516620636, -0.08069989830255508, -0.19707746803760529, 0.30216115713119507, -0.25180840492248535, 0.2852000594139099, 0.2311621457338333],
        [-0.06014598160982132, -0.07530664652585983, 0.08603012561798096, 0.15872283279895782, 0.15890555083751678, 0.05265078693628311, -0.1441352218389511, -0.11021246016025543, 0.0034515289589762688, -0.012993104755878448],
        [-0.13516183197498322, 0.06266383826732635, 0.1830369532108307, 0.1689484566450119, 0.051484834402799606, 0.15971219539642334, -0.04846806451678276, -0.13905711472034454, -0.2022702991962433, 0.11839661747217178],
        [-0.04558691754937172, -0.09432997554540634, -0.2042951136827469, 0.29014497995376587, -0.23997071385383606, -0.15737853944301605, 0.09393799304962158, -0.10377650707960129, -0.18438293039798737, 0.26777827739715576],
        [0.022992124781012535, -0.019097810611128807, 0.02829008176922798, -0.0366244800388813, -0.11841472238302231, -0.07928334176540375, ...],
        ...
      ]
    >
  }
}
```

## Evaluating the Model

```elixir
model
|> Axon.Loop.evaluator()
|> Axon.Loop.metric(:accuracy)
|> Axon.Loop.run(test_data, trained_model_state, compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```

15:32:30.873 [debug] Forwarding options: [compiler: EXLA] to JIT compiler
Batch: 156, accuracy: 0.9371019
```

<!-- livebook:{"output":true} -->

```
%{
  0 => %{
    "accuracy" => #Nx.Tensor<
      f32
      EXLA.Backend<host:0, 0.1724559314.4139384849.25776>
      0.9371019005775452
    >
  }
}
```

## Executing Models with Axon

```elixir
[{test_batch, _}] = Enum.take(test_data, 1)
```

<!-- livebook:{"output":true} -->

```
[
  {#Nx.Tensor<
     f32[64][784]
     EXLA.Backend<host:0, 0.1724559314.4139384849.25777>
     [
       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...],
       ...
     ]
   >,
   #Nx.Tensor<
     u8[64][10]
     EXLA.Backend<host:0, 0.1724559314.4139384849.25778>
     [
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 1, ...],
       ...
     ]
   >}
]
```

```elixir
test_image = test_batch[1]
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[784]
  EXLA.Backend<host:0, 0.1724559314.4139384849.25797>
  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...]
>
```

```elixir
test_image
|> Nx.reshape({28, 28})
|> Nx.to_heatmap()
```

<!-- livebook:{"output":true} -->

```
#Nx.Heatmap<
  f32[28][28]
  
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
  　　　　　　　　　　　　　　　　　　　　　　　　　　　　
>
```

```elixir
{_, predict_fn} = Axon.build(model, compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```
{#Function<134.70434077/2 in Nx.Defn.Compiler.fun/2>,
 #Function<134.70434077/2 in Nx.Defn.Compiler.fun/2>}
```

```elixir
# Uncomment and run and this will raise!
predict_fn.(trained_model_state, test_image)
```

```elixir
probabilities =
  test_image
  |> Nx.new_axis(0)
  |> then(&predict_fn.(trained_model_state, &1))
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[1][10]
  EXLA.Backend<host:0, 0.1724559314.4139384849.25800>
  [
    [9.18520163395442e-6, 1.9154771871399134e-4, 0.004306578543037176, 0.009376204572618008, 0.002378550823777914, 0.0052066161297261715, 3.823340739472769e-5, 3.9136728446464986e-5, 0.9782620668411255, 1.918784691952169e-4]
  ]
>
```

```elixir
probabilities |> Nx.argmax()
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64
  EXLA.Backend<host:0, 0.1724559314.4139384849.25801>
  8
>
```
